[leetcode 719]
 ---------------------------------------------------------------------------------------------------------------------------------------------------
Find K-th Smallest Pair Distance
Hard
Companies
The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 ----------------------------------------------------------------------------------------------------------------------------------------------------

Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2

 ----------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
// int check(vector<int>& nums,int x,int k)
// {
//     int count=0;
//     for(int i=0;i<nums.size();i++)
//     {
//         for(int j=i+1;j<nums.size();j++)
//         {
//             if(abs(nums[j]-nums[i])<=x)
//             {
//                 count++;
//             }
//             else
//             {
//                 break;
//             }
//         }
//     }
//     return count;
// }

int check(vector<int>& nums,int x,int k)
{
    int count=0;
    for(int i=0;i<nums.size();i++)
    {
        count+=bs(i,nums,x);
    }
    cout<<count<<endl;
    return count;
}
    int bs(int lo,vector<int>& nums,int x)
    {
        int start=lo+1;
        int ans=0;
        int hi=nums.size()-1;
        while(start<=hi)
        {
           int mid=(start+(hi-start)/2);
            if(abs(nums[lo]-nums[mid])<=x)
            {
                ans=mid-lo;
                start=mid+1;
            }
            else
            hi=mid-1;
        }
        return ans;
    }

    int smallestDistancePair(vector<int>& nums, int k)
    {
       sort(nums.begin(),nums.end());
       int lo=0;int hi=nums[nums.size()-1]-nums[0];int ans=-1;
       while(lo<=hi)
       {
           int mid=lo+(hi-lo)/2;
           if(check(nums,mid,k)>=k)
           {
               ans=mid;
               hi=mid-1;
           }
           else
           lo=mid+1;
       } 
       return ans;
    }
};
 ----------------------------------------------------------------------------------------------------------------------------------------------------
